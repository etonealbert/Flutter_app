def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '21'
}

// CCV 2.7 = 21
// CCV 2.6 = 20
// CCV 2.5 = 19
// CCV 2.4 = 18
// CCV 2.3 = 17
// CCV 2.2 = 16
// CCV 2.1 = 15
// CCV 2.0 = 14
// CCV 1.9 = 13
// CCV 1.8 = 12
// CCV 1.7 = 11
// CCV 1.6 = 10
// CCV 1.5 = 9
// CCV 1.4 = 8
// CCV 1.4 = 7
// CCV 1.3 = 6
// CCV 1.2 = 5
// CCV 1.1 = 4
// CCV 1.0 = 3
// CCV 1.0 = 2
// CCV 1.0 = 1

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '2.7.0'
}

// CCV 2.7 = 2.7.0
// CCV 2.6 = 2.6.0
// CCV 2.5 = 2.5.0
// CCV 2.4 = 2.4.0
// CCV 2.3 = 2.3.0
// CCV 2.2 = 2.2.0
// CCV 2.1 = 2.1.0
// CCV 2.0 = 2.0.0
// CCV 1.9 = 1.9.0
// CCV 1.8 = 1.8.0
// CCV 1.7 = 1.7.0
// CCV 1.6 = 1.6.0
// CCV 1.5 = 1.5.0
// CCV 1.4 = 1.4.0
// CCV 1.3 = 1.3.0
// CCV 1.2 = 1.2.0
// CCV 1.1 = 1.1.0
// CCV 1.0 = 1.0.2
// CCV 1.0 = 1.0.1
// CCV 1.0 = 1.0.0

def keystoreProperties = new Properties()
   def keystorePropertiesFile = rootProject.file('key.properties')
   if (keystorePropertiesFile.exists()) {
       keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
   }

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

apply plugin: 'kotlin-android'
android {
    compileSdkVersion 33

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TOD: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.panaceasoft.flutterstore"
        minSdkVersion 24
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

     signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    
   buildTypes {
        release {
            // TOD: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug

            minifyEnabled true
            // useProguard true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.google.firebase:firebase-core:17.3.0'
    implementation 'com.google.firebase:firebase-messaging:20.1.5'
    implementation 'com.google.firebase:firebase-crashlytics:17.2.2'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'androidx.work:work-runtime-ktx:2.7.0'
    implementation('com.braintreepayments.api:drop-in:5.2.1'){
      exclude group: "org.jfrog.cardinalcommerce.gradle", module: "cardinalmobilesdk"
    }
    implementation("org.jfrog.cardinalcommerce.gradle:cardinalmobilesdk:2.2.7-2")
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
